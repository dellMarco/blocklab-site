/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Voting extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [{ name: "membersContractAddress", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: false,
        inputs: [
          { name: "name", type: "string" },
          { name: "documentHash", type: "bytes32" },
          { name: "newBoardMembers", type: "address[]" }
        ],
        name: "initiateBoardMemberVote",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "name", type: "string" },
          { name: "documentHash", type: "bytes32" }
        ],
        name: "initiateDocumentVote",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "name", type: "string" },
          { name: "newContractAddress", type: "address" }
        ],
        name: "initiateVotingContractUpdateVote",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "voteId", type: "uint256" },
          { name: "decision", type: "bool" }
        ],
        name: "castVote",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getNumberOfVotes",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "voteId", type: "uint256" }],
        name: "getVoteDetails",
        outputs: [
          { name: "", type: "string" },
          { name: "", type: "uint256" },
          { name: "", type: "bytes32" },
          { name: "", type: "uint256" },
          { name: "", type: "address[]" },
          { name: "", type: "address" },
          { name: "", type: "address[]" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "voteId", type: "uint256" }],
        name: "closeVote",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "voteId", type: "uint256" }],
        name: "computeVoteOutcome",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Voting> {
    const contract = new Voting(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getNumberOfVotes(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getNumberOfVotes, []);
  }
  public getVoteDetails(
    voteId: BigNumber | number
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string[], string, string[]]
  > {
    return promisify(this.rawWeb3Contract.getVoteDetails, [voteId.toString()]);
  }
  public computeVoteOutcome(voteId: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.computeVoteOutcome, [
      voteId.toString()
    ]);
  }

  public initiateBoardMemberVoteTx(
    name: string,
    documentHash: BigNumber,
    newBoardMembers: string[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "initiateBoardMemberVote",
      [
        name.toString(),
        documentHash.toString(),
        newBoardMembers.map(val => val.toString())
      ]
    );
  }
  public initiateDocumentVoteTx(
    name: string,
    documentHash: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "initiateDocumentVote",
      [name.toString(), documentHash.toString()]
    );
  }
  public initiateVotingContractUpdateVoteTx(
    name: string,
    newContractAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "initiateVotingContractUpdateVote",
      [name.toString(), newContractAddress.toString()]
    );
  }
  public castVoteTx(
    voteId: BigNumber | number,
    decision: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "castVote", [
      voteId.toString(),
      decision.toString()
    ]);
  }
  public closeVoteTx(
    voteId: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "closeVote", [
      voteId.toString()
    ]);
  }
}
