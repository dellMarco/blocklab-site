/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract, 
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";  

export class Members extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      { 
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "members",
        outputs: [
          { name: "name", type: "string" },
          { name: "status", type: "uint8" },
          { name: "entryBlock", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "votingContractAddress",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "memberAddresses",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [{ name: "initialMemberAddresses", type: "address[]" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: true,
        inputs: [],
        name: "getNumberOfMembers",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "memberName", type: "string" }],
        name: "applyForMembership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "applicant", type: "address" }],
        name: "confirmApplication",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newName", type: "string" }],
        name: "changeName",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "memberAddress", type: "address" }],
        name: "isRegularOrBoardMember",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "resignOwnMembership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newBoardMembers", type: "address[]" }],
        name: "replaceBoardMembers",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getNumberOfEligibleMembers",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newAddress", type: "address" }],
        name: "setVotingContractAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newAddress", type: "address" }],
        name: "updateVotingContractAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Members> {
    const contract = new Members(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get votingContractAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.votingContractAddress, []);
  }
  public get getNumberOfMembers(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getNumberOfMembers, []);
  }
  public get getNumberOfEligibleMembers(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getNumberOfEligibleMembers, []);
  }
  public members(
    arg0: BigNumber | string
  ): Promise<[string, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.members, [arg0.toString()]);
  }
  public memberAddresses(arg0: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.memberAddresses, [arg0.toString()]);
  }
  public isRegularOrBoardMember(
    memberAddress: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isRegularOrBoardMember, [
      memberAddress.toString()
    ]);
  }

  public applyForMembershipTx(
    memberName: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "applyForMembership",
      [memberName.toString()]
    );
  }
  public confirmApplicationTx(
    applicant: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "confirmApplication",
      [applicant.toString()]
    );
  }
  public changeNameTx(newName: string): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeName", [
      newName.toString()
    ]);
  }
  public resignOwnMembershipTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "resignOwnMembership",
      []
    );
  }
  public replaceBoardMembersTx(
    newBoardMembers: string[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "replaceBoardMembers",
      [newBoardMembers.map(val => val.toString())]
    );
  }
  public setVotingContractAddressTx(
    newAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setVotingContractAddress",
      [newAddress.toString()]
    );
  }
  public updateVotingContractAddressTx(
    newAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "updateVotingContractAddress",
      [newAddress.toString()]
    );
  }
}
